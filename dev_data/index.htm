<!DOCTYPE html>
<html>
 <head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <link rel="stylesheet" type="text/css" href="css/build.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Страница устройств</title>
  <script type="text/javascript">
   var xhttp=createXmlHttpObject();
   function createXmlHttpObject(){
    if(window.XMLHttpRequest){
     xhttp=new XMLHttpRequest();
    }else{
     xhttp=new ActiveXObject('Microsoft.XMLHTTP');
    }
    return xhttp;
   }

   window.onload = function() {
    iplocation();

    var lang = window.navigator.language || navigator.userLanguage;
    var now_day = {
     year: new Date().toLocaleString(lang, {year: 'numeric'}),
     month: new Date().toLocaleString(lang, {month: 'long'}),
     day: new Date().toLocaleString(lang, {day: 'numeric'}),
     weekday: new Date().toLocaleString(lang, {weekday: 'long'})
    };
    document.getElementById('date').innerHTML = now_day.day+' '+now_day.weekday+'<small class="show">'+now_day.month+' '+now_day.year+'</small>';
   }

   function finddevice() {
    document.getElementById('content').innerHTML='<div class="alert alert-dismissible alert-info"><div class="loader"></div><strong>Пожалуйста подождите, идет сканирование сети.</strong></div>';
    var xhttp=createXmlHttpObject();
    xhttp.open("GET", "/devices.scan.json?"+Math.floor(Math.random()*10000), false);
    xhttp.send();
    setTimeout(function(){iplocation('search')}, 7000);
   }

   function iplocation(searc) {
    document.getElementById('content').innerHTML='';
    var xhttp=createXmlHttpObject();
    xhttp.open("GET", "/devices.list.json?"+Math.floor(Math.random()*10000), true);
    xhttp.send(null);
    xhttp.onload = function(e) {
     var ipModule=JSON.parse(xhttp.responseText);
     for(var key in ipModule) {
      var ipval = ipModule[key].ip;
      if (searc == 'search') {
       //xhttp.open("GET", "http://"+ipval+"/devices.scan.json"+Math.floor(Math.random()*10000), false);
       //xhttp.send();
      }
      if (ipval == '0.0.0.0') {
       location.href = "/setup.htm#wifi-connect";
      } else {
       loadBlock(ipval,'content','first');
      }
     }
    }
   }

   function loadBlock(ipval, content, status) {
    if (status == 'first'){
     document.getElementById(content).innerHTML+='<div id="block-'+ipval+'"><div class="block col-md-5"><div class="loader"></div> <a href="http://'+ipval+'">http://'+ipval+'</a> </div></div>';
    }

    var xhttp=createXmlHttpObject();
    xhttp.open("GET", "http://"+ipval+"/block.htm?"+Math.floor(Math.random()*10000), true);
    xhttp.send(null);
    xhttp.onload = function(e) {
     var data = xhttp.responseText;

     xhttp.open("GET", "http://"+ipval+"/configs.json?"+Math.floor(Math.random()*10000), true);
     xhttp.send(null);
     xhttp.onload = function(e) {
      var jsonResponse1 = JSON.parse(xhttp.responseText);

      xhttp.open("GET", "http://"+ipval+"/lang/lang."+jsonResponse1.lang+".json", true);
      xhttp.send(null);
      xhttp.onload = function(e) {
       var jsonResponse2=JSON.parse(xhttp.responseText);
       var jsonResponse = Object.assign(jsonResponse1, jsonResponse2);

       var theCookies = document.cookie.split(';');
       for (var i = 1 ; i <= theCookies.length; i++) {
        jsonResponse[theCookies[i-1].split("=")[0].replace(/^ /,'')] = theCookies[i-1].split("=")[1];
       }

       jsonResponse.ip = ipval;
       if (jsonResponse.state == 0){
        jsonResponse.state = jsonResponse.LangOn;
       } else {
        jsonResponse.state = jsonResponse.LangOff;
       }

       var new_string;
       for (var key in jsonResponse) {
        new_string = data.replace(new RegExp('{{'+key+'}}', 'g'), jsonResponse[key]);
        data = new_string;
       }
       document.getElementById("block-"+ipval).innerHTML=new_string;
      }
     }
    }
   }

   function ajax(blockIp, pagename, submit) {
    var old_submit = submit.value;
    var d = new Date(); // for now
    var datetext = d.getHours()+":"+d.getMinutes()+":"+d.getSeconds();
    var parent = submit.parentNode.childNodes[1].innerHTML;
    document.getElementById('history').insertAdjacentHTML('afterbegin', '<li>'+datetext+'<span class="history" style="cursor:pointer" onclick="toggle(\'hide-'+datetext+'\');return false"><b>'+parent+'</b><br><em>'+old_submit+'</em><small class="hidden" id="hide-'+datetext+'"><hr>URL: <a href="http://'+blockIp+'/'+pagename+'">http://'+blockIp+'/'+pagename+'</a></small></span></li>');
    submit.value = 'Loading...';
    submit_disabled(true);
    var xhttp=createXmlHttpObject();
    xhttp.open("GET", "http://"+blockIp+"/"+pagename, true);
    xhttp.send(null);
    xhttp.onload = function(e) {
     submit.value=old_submit;
     submit_disabled(false);
     loadBlock(blockIp,'block-'+blockIp, '');
    }
   }

   function submit_disabled(request){
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
     if (inputs[i].type === 'submit') {inputs[i].disabled = request;}
    }
   }

   function toggle(target) {
    var curVal = document.getElementById(target).classList;
    if (curVal.contains('hidden')) {
     curVal.remove('hidden');
     curVal.add('show');
    } else {
     curVal.remove('show');
     curVal.add('hidden');
    }
   }

   function val(id,val){
    if (val) {
     document.getElementById(id).value=(val==' '?'':val);
    } else {
     var v = document.getElementById(id).value;
     return v;
    }
   }

   function setCookie(name, value, days, submit) {
    if (days) {
     var date = new Date();
     date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
     var expires = "; expires=" + date.toGMTString();
    }
    else expires = "";
    document.cookie = name + "=" + value + expires + "; path=/";
    submit.parentNode.classList.add('hidden');
   }
  </script>
 </head>
 <body>
  <div class="container device">
   <div class="header">
    <h4><small class="pull-right col-md-4 hidden-xs" style="padding:15px 0;">Здесь видны все ваши устройства, скачать прошивки для ESP8266 вы можете на github: <a href="https://github.com/tretyakovsa/jaluzi" target="_blank">Жалюзи</a>, <a href="https://github.com/renat2985/rgb" target="_blank">RGB</a>, <a href="https://github.com/tretyakovsa/Sonoff_WiFi_switch" target="_blank">Sonoff</a>. Если появились какие-то вопросы, пишите сюда: <a href="https://github.com/tretyakovsa/jaluzi/issues/new" target="_blank">Жалюзи</a>, <a href="https://github.com/renat2985/rgb/issues/new" target="_blank">RGB</a>, <a href="https://github.com/tretyakovsa/Sonoff_WiFi_switch/issues/new" target="_blank">Sonoff</a>.</small></h4>
    <h1 id="date"><br><small></small></h1>
   </div>
   <div class="col-sm-12 col-md-3">
    <h5 style="background-color:#C0C7CA;cursor:pointer" onclick="toggle('history');return false">История</h5>
    <ul id="history"></ul>
    <hr>
    <div class="block">
     <h5 class="alert-danger">Поиск</h5>
     <div class="alert alert-dismissible alert-info">Если у вас несколько устройств подключено к сети, вы можете добавить его сюда нажав кнопку ниже:</div>
     <a onclick="finddevice();" class="btn btn-block btn-default" href="#">Найти устройства</a>
    </div>
   </div>
   <div class="col-sm-12 col-md-9" style="text-align:center;" id="content">
    <div class="loader"></div><p>Загрузка...</p>
   </div>
  </div>
 </body>
</html>
